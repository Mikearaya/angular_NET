// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using angularNet.Models;

namespace angularNet.Migrations
{
    [DbContext(typeof(smart_financeContext))]
    partial class smart_financeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("angularNet.Models.AccountCategory", b =>
                {
                    b.Property<int>("AccCatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("acc_cat_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)");

                    b.HasKey("AccCatId");

                    b.ToTable("account_category");
                });

            modelBuilder.Entity("angularNet.Models.AccountChart", b =>
                {
                    b.Property<uint>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ACCOUNT_ID");

                    b.Property<string>("AccountCode")
                        .IsRequired()
                        .HasColumnName("account_code")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnName("account_type")
                        .HasColumnType("varchar(45)");

                    b.Property<sbyte>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("LocationId")
                        .HasColumnName("LOCATION_ID")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("SubAccountCode")
                        .HasColumnName("sub_account_code")
                        .HasColumnType("varchar(45)");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountCode")
                        .IsUnique()
                        .HasName("account_code_UNIQUE");

                    b.HasIndex("LocationId")
                        .HasName("fk_account_chart_location_idx");

                    b.ToTable("account_chart");
                });

            modelBuilder.Entity("angularNet.Models.AccountType", b =>
                {
                    b.Property<int>("AccTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("acc_type_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Category")
                        .HasColumnName("category")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(100)");

                    b.HasKey("AccTypeId");

                    b.HasIndex("Category")
                        .HasName("fk_account_type_category_idx");

                    b.ToTable("account_type");
                });

            modelBuilder.Entity("angularNet.Models.BankAccounts", b =>
                {
                    b.Property<uint>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BANK_ID");

                    b.Property<string>("BankAccountCode")
                        .HasColumnName("bank_account_code")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("BankCreditAccount")
                        .HasColumnName("bank_credit_account")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("BankDebitAccount")
                        .HasColumnName("bank_debit_account")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)");

                    b.HasKey("BankId");

                    b.ToTable("bank_accounts");
                });

            modelBuilder.Entity("angularNet.Models.BankTransactions", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnName("amount")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("BankAccountId")
                        .IsRequired()
                        .HasColumnName("bank_account_id")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("varchar(45)");

                    b.Property<sbyte>("Reconcield")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("reconcield")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.ToTable("bank_transactions");
                });

            modelBuilder.Entity("angularNet.Models.CalendarPeriod", b =>
                {
                    b.Property<uint>("PeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PERIOD_ID");

                    b.Property<sbyte>("Active")
                        .HasColumnName("active")
                        .HasColumnType("tinyint(4)");

                    b.Property<DateTime>("End")
                        .HasColumnName("end")
                        .HasColumnType("date");

                    b.Property<DateTime>("Start")
                        .HasColumnName("start")
                        .HasColumnType("date");

                    b.HasKey("PeriodId");

                    b.ToTable("calendar_period");
                });

            modelBuilder.Entity("angularNet.Models.Currency", b =>
                {
                    b.Property<uint>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CURRENCY_ID");

                    b.Property<string>("Abrevation")
                        .IsRequired()
                        .HasColumnName("abrevation")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnName("country")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Symbole")
                        .IsRequired()
                        .HasColumnName("symbole")
                        .HasColumnType("varchar(10)");

                    b.HasKey("CurrencyId");

                    b.HasIndex("Abrevation")
                        .IsUnique()
                        .HasName("abrevation_UNIQUE");

                    b.HasIndex("Country")
                        .IsUnique()
                        .HasName("country_UNIQUE");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("name_UNIQUE");

                    b.ToTable("currency");
                });

            modelBuilder.Entity("angularNet.Models.ExchangeRate", b =>
                {
                    b.Property<uint>("RateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RATE_ID");

                    b.Property<float>("BuyRate")
                        .HasColumnName("buy_rate");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnName("CURRENCY_CODE")
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("datetime");

                    b.Property<float>("SaleRate")
                        .HasColumnName("sale_rate");

                    b.HasKey("RateId");

                    b.ToTable("exchange_rate");
                });

            modelBuilder.Entity("angularNet.Models.GeneralLedger", b =>
                {
                    b.Property<uint>("LedgerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LEDGER_ID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnName("ACCOUNT_ID")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnName("amount")
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("datetime");

                    b.HasKey("LedgerId");

                    b.ToTable("general_ledger");
                });

            modelBuilder.Entity("angularNet.Models.Jornal", b =>
                {
                    b.Property<uint>("JornalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("JORNAL_ID");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnName("amount")
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("datetime");

                    b.Property<string>("Reference")
                        .HasColumnName("reference")
                        .HasColumnType("varchar(45)");

                    b.HasKey("JornalId");

                    b.ToTable("jornal");
                });

            modelBuilder.Entity("angularNet.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LOCATION_ID")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)");

                    b.HasKey("LocationId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("name_UNIQUE");

                    b.ToTable("location");
                });

            modelBuilder.Entity("angularNet.Models.Suppliers", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SUPPLIER_ID")
                        .HasColumnType("int(11)");

                    b.Property<string>("AccountNumber")
                        .HasColumnName("account_number")
                        .HasColumnType("varchar(45)");

                    b.Property<sbyte>("Active")
                        .HasColumnName("active")
                        .HasColumnType("tinyint(4)");

                    b.Property<string>("BankAccount")
                        .HasColumnName("bank_account")
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("CreditLimit")
                        .HasColumnName("credit_limit")
                        .HasColumnType("int(11)");

                    b.Property<string>("Discription")
                        .HasColumnName("discription")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("PayableAccount")
                        .HasColumnName("payable_account")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("PayableDiscountAccount")
                        .HasColumnName("payable_discount_account")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("PurchaseAccount")
                        .HasColumnName("purchase_account")
                        .HasColumnType("varchar(45)");

                    b.Property<sbyte>("TaxIncluded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tax_included")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("SupplierId");

                    b.ToTable("suppliers");
                });

            modelBuilder.Entity("angularNet.Models.SystemDefaults", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnName("category")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnName("data_type")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Length")
                        .IsRequired()
                        .HasColumnName("length")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id");

                    b.ToTable("system_defaults");
                });

            modelBuilder.Entity("angularNet.Models.AccountChart", b =>
                {
                    b.HasOne("angularNet.Models.Location", "Location")
                        .WithMany("AccountChart")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_account_chart_location")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("angularNet.Models.AccountType", b =>
                {
                    b.HasOne("angularNet.Models.AccountCategory", "CategoryNavigation")
                        .WithMany("AccountType")
                        .HasForeignKey("Category")
                        .HasConstraintName("fk_account_type_category")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
